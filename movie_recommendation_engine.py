# -*- coding: utf-8 -*-
"""movie_recommendation_engine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U0YYswa7elSKfc3ES-QpG3GFFhCPZoHP
"""

# Movie recommendation engine using machine learning and natural language processing
# Importing required libraries
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from operator import itemgetter

# Uplaoding the file
from google.colab import files
uploaded = files.upload()

# Storing the uploaded file in a dataframe
data_frame = pd.read_csv('movies.csv')
#data_frame.head() use this to view sample dataframe and pick out the attributes to be used for making feature vector
#data_frame.shape use this to obtain the number of movies present in the dataset

# Creating a feature vector
def get_feature_vector(data_frame):
  feature_vector = []
  for i in range (0,data_frame.shape[0]) :
    feature_vector.append(data_frame['Title'][i]+' '+data_frame['Genre'][i]+' '+data_frame['Actors'][i]+' '+data_frame['Director'][i])
  return feature_vector

# Adding feature vector to dataframe
data_frame['Feature Vector'] = get_feature_vector(data_frame)

# Creating a count vector matrix
count_matrix = CountVectorizer().fit_transform(data_frame['Feature Vector'])

# Creating the cosine similarity matrix
similarity_matrix = cosine_similarity(count_matrix)

# Taking input movie
search_title = 'Suicide Squad'
movie_index = data_frame[data_frame.Title == search_title]['Rank'].values[0] - 1

# Gettting most similar movies
sorted_scores = sorted(list(enumerate(similarity_matrix[movie_index])), key = itemgetter(1),reverse = True)
sorted_scores = sorted_scores[1:]

# Generating recommendations
j = 0
for item in sorted_scores :
  print(data_frame['Title'][item[0]])
  if j == 7:
    break
  else :
    j = j+1

